{"version":3,"sources":["components/TodoList/TodoList.jsx","api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["TodoList","allTodos","onUserSelect","useState","todos","setTodos","category","setCategory","query","setQuery","categoryFilters","all","active","todo","completed","filterTodos","searchQuery","selectedCategory","filter","title","toLowerCase","includes","className","type","id","placeholder","onChange","event","value","target","name","map","key","checked","readOnly","onClick","userId","defaultProps","BASE_URL","fetchData","baseUrl","path","fetch","then","response","json","result","data","CurrentUser","state","user","this","loadUser","prevProps","props","setState","email","phone","onClear","React","PureComponent","App","selectedUserId","clear","selectUserId","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fd221074.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './TodoList.scss';\nimport PropTypes from 'prop-types';\n\nconst TodoList = ({ allTodos, onUserSelect }) => {\n  const [todos, setTodos] = useState(allTodos);\n  const [category, setCategory] = useState('all');\n  const [query, setQuery] = useState('');\n\n  const categoryFilters = {\n    all: () => true,\n    active: todo => !todo.completed,\n    completed: todo => todo.completed,\n  };\n\n  const onComplete = (event) => {\n    const { value } = event.target;\n\n    setCategory(value);\n\n    filterTodos(query, value);\n  };\n\n  const onSearch = (event) => {\n    const { value } = event.target;\n\n    setQuery(value);\n\n    filterTodos(value, category);\n  };\n\n  const filterTodos = (searchQuery, selectedCategory) => {\n    setTodos([...allTodos]\n      .filter(todo => todo.title.toLowerCase().includes(\n        searchQuery.toLowerCase(),\n      ) && categoryFilters[selectedCategory](todo)));\n  };\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <form className=\"TodoList__form\">\n        <input\n          type=\"text\"\n          id=\"search-query\"\n          className=\"TodoList__enter\"\n          placeholder=\"Enter\"\n          onChange={onSearch}\n        />\n\n        <select\n          name=\"todosFilter\"\n          onChange={onComplete}\n        >\n          <option value=\"all\">\n            All todos\n          </option>\n          <option value=\"active\">\n            Active todos\n          </option>\n          <option value=\"completed\">\n            Completed todos\n          </option>\n        </select>\n\n      </form>\n\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {todos.map(todo => (\n            <li\n              key={todo.id}\n              className={`TodoList__item\n                TodoList__item--${todo.completed ? '' : 'un'}checked`\n              }\n            >\n              <label>\n                <input type=\"checkbox\" checked={todo.completed} readOnly />\n                <p>{todo.title}</p>\n              </label>\n\n              <button\n                className=\"TodoList__user-button button\"\n                type=\"button\"\n                onClick={() => onUserSelect(todo.userId)}\n              >\n                User&nbsp;#\n                {todo.userId}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nTodoList.defaultProps = {\n  allTodos: [{\n    userId: 0,\n    completed: false,\n  }],\n};\n\nTodoList.propTypes = {\n  allTodos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      userId: PropTypes.number,\n      title: PropTypes.string.isRequired,\n      completed: PropTypes.bool,\n    }),\n  ),\n  onUserSelect: PropTypes.func.isRequired,\n};\n\nexport { TodoList };\n","const BASE_URL = 'https://mate-api.herokuapp.com';\n\nfunction fetchData(baseUrl, path) {\n  return fetch(`${baseUrl}/${path}`)\n    .then(response => response.json())\n    .then(result => result.data);\n}\n\nexport const getAllTodos = () => fetchData(BASE_URL, 'todos');\n\nexport const getUserById = id => fetchData(BASE_URL, `users/${id}`);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { getUserById } from '../../api';\nimport './CurrentUser.scss';\n\nclass CurrentUser extends React.PureComponent {\n  state = {\n    user: {},\n  }\n\n  componentDidMount() {\n    this.loadUser();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.userId !== this.props.userId) {\n      this.loadUser();\n    }\n  }\n\n  async loadUser() {\n    const user = await getUserById(this.props.userId) || {};\n\n    this.setState({\n      user,\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            Selected user:&nbsp;\n            {this.state.user.id || 'Unknown'}\n          </span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">\n          {this.state.user.name || 'No name'}\n        </h3>\n        <p className=\"CurrentUser__email\">\n          {this.state.user.email || 'No email'}\n        </p>\n        <p className=\"CurrentUser__phone\">\n          {this.state.user.phone || 'No phone'}\n        </p>\n\n        <button\n          type=\"button\"\n          className=\"CurrentUser__button button\"\n          onClick={this.props.onClear}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  onClear: PropTypes.func.isRequired,\n};\n\nexport { CurrentUser };\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getAllTodos } from './api';\n\nclass App extends React.PureComponent {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  async componentDidMount() {\n    const todos = await getAllTodos();\n\n    this.setState(state => ({\n      ...state,\n      todos,\n    }));\n  }\n\n  clear = () => {\n    this.selectUserId(0);\n  }\n\n  selectUserId = (id) => {\n    this.setState(state => ({\n      ...state,\n      selectedUserId: id,\n    }));\n  }\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          {todos.length ? (\n            <TodoList\n              allTodos={todos}\n              onUserSelect={this.selectUserId}\n            />\n          ) : 'There are no todos'}\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser userId={selectedUserId} onClear={this.clear} />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}