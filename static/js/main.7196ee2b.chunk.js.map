{"version":3,"sources":["components/Form/Form.jsx","components/Todo/Todo.jsx","components/TodoList/TodoList.jsx","api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["Form","onSearch","onComplete","className","type","id","placeholder","onChange","name","value","Todo","userId","title","completed","onUserClick","checked","readOnly","onClick","TodoList","allTodos","onUserSelect","useState","todos","setTodos","category","setCategory","query","setQuery","categoryFilters","all","active","todo","filterTodos","searchQuery","selectedCategory","filter","toLowerCase","includes","event","target","map","key","defaultProps","BASE_URL","fetchData","baseUrl","path","fetch","then","response","json","result","data","CurrentUser","state","user","this","loadUser","prevProps","props","setState","email","phone","onClear","React","PureComponent","App","selectedUserId","clear","selectUserId","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7196ee2b.chunk.js","sourcesContent":["import React from 'react';\nimport './Form.scss';\nimport PropTypes from 'prop-types';\n\nconst Form = ({ onSearch, onComplete }) => (\n  <form className=\"TodoList__form\">\n    <input\n      type=\"text\"\n      id=\"search-query\"\n      className=\"TodoList__enter\"\n      placeholder=\"Enter\"\n      onChange={onSearch}\n    />\n\n    <select\n      name=\"todosFilter\"\n      onChange={onComplete}\n    >\n      <option value=\"all\">\n        All todos\n      </option>\n      <option value=\"active\">\n        Active todos\n      </option>\n      <option value=\"completed\">\n        Completed todos\n      </option>\n    </select>\n\n  </form>\n);\n\nForm.propTypes = {\n  onSearch: PropTypes.func.isRequired,\n  onComplete: PropTypes.func.isRequired,\n};\n\nexport { Form };\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Todo = ({ userId, title, completed, onUserClick }) => (\n  <li\n    className={`TodoList__item\n      TodoList__item--${completed ? '' : 'un'}checked`\n    }\n  >\n    <label>\n      <input type=\"checkbox\" checked={completed} readOnly />\n      <p>{title}</p>\n    </label>\n\n    <button\n      className=\"TodoList__user-button button\"\n      type=\"button\"\n      onClick={() => onUserClick(userId)}\n    >\n      User&nbsp;#\n      {userId}\n    </button>\n  </li>\n);\n\nTodo.defaultProps = {\n  userId: 0,\n  completed: false,\n  title: 'No title',\n};\n\nTodo.propTypes = {\n  userId: PropTypes.number,\n  title: PropTypes.string,\n  completed: PropTypes.bool,\n  onUserClick: PropTypes.func.isRequired,\n};\n\nexport { Todo };\n","import React, { useState } from 'react';\nimport './TodoList.scss';\nimport PropTypes from 'prop-types';\nimport { Form } from '../Form';\nimport { Todo } from '../Todo';\n\nconst TodoList = ({ allTodos, onUserSelect }) => {\n  const [todos, setTodos] = useState(allTodos);\n  const [category, setCategory] = useState('all');\n  const [query, setQuery] = useState('');\n\n  const categoryFilters = {\n    all: () => true,\n    active: todo => !todo.completed,\n    completed: todo => todo.completed,\n  };\n\n  const onComplete = (event) => {\n    const { value } = event.target;\n\n    setCategory(value);\n\n    filterTodos(query, value);\n  };\n\n  const onSearch = (event) => {\n    const { value } = event.target;\n\n    setQuery(value);\n\n    filterTodos(value, category);\n  };\n\n  const filterTodos = (searchQuery, selectedCategory) => {\n    setTodos([...allTodos]\n      .filter(todo => todo.title && todo.title.toLowerCase().includes(\n        searchQuery.toLowerCase(),\n      ) && categoryFilters[selectedCategory](todo)));\n  };\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <Form onSearch={onSearch} onComplete={onComplete} />\n\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {todos.map(todo => (\n            <Todo key={todo.id} {...todo} onUserClick={onUserSelect} />\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nTodoList.defaultProps = {\n  allTodos: [\n    Todo.defaultProps,\n  ],\n};\n\nTodoList.propTypes = {\n  allTodos: PropTypes.arrayOf(\n    PropTypes.shape({\n      userId: PropTypes.number,\n      title: PropTypes.string,\n      completed: PropTypes.bool,\n      id: PropTypes.number.isRequired,\n    }),\n  ),\n  onUserSelect: PropTypes.func.isRequired,\n};\n\nexport { TodoList };\n","const BASE_URL = 'https://mate-api.herokuapp.com';\n\nfunction fetchData(baseUrl, path) {\n  return fetch(`${baseUrl}/${path}`)\n    .then(response => response.json())\n    .then(result => result.data);\n}\n\nexport const getAllTodos = () => fetchData(BASE_URL, 'todos');\n\nexport const getUserById = id => fetchData(BASE_URL, `users/${id}`);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { getUserById } from '../../api';\nimport './CurrentUser.scss';\n\nclass CurrentUser extends React.PureComponent {\n  state = {\n    user: {},\n  }\n\n  componentDidMount() {\n    this.loadUser();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.userId !== this.props.userId) {\n      this.loadUser();\n    }\n  }\n\n  async loadUser() {\n    const user = await getUserById(this.props.userId) || {};\n\n    this.setState({\n      user,\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            Selected user:&nbsp;\n            {this.state.user.id || this.props.userId || 'Unknown'}\n          </span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">\n          {this.state.user.name || 'No name'}\n        </h3>\n        <p className=\"CurrentUser__email\">\n          {this.state.user.email || 'No email'}\n        </p>\n        <p className=\"CurrentUser__phone\">\n          {this.state.user.phone || 'No phone'}\n        </p>\n\n        <button\n          type=\"button\"\n          className=\"CurrentUser__button button\"\n          onClick={this.props.onClear}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  onClear: PropTypes.func.isRequired,\n};\n\nexport { CurrentUser };\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getAllTodos } from './api';\n\nclass App extends React.PureComponent {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  async componentDidMount() {\n    const todos = (await getAllTodos())\n      .filter(({ title, completed, userId }) => title && userId);\n\n    this.setState(state => ({\n      ...state,\n      todos,\n    }));\n  }\n\n  clear = () => {\n    this.selectUserId(0);\n  }\n\n  selectUserId = (id) => {\n    this.setState(state => ({\n      ...state,\n      selectedUserId: id,\n    }));\n  }\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          {todos.length ? (\n            <TodoList\n              allTodos={todos}\n              onUserSelect={this.selectUserId}\n            />\n          ) : 'There are no todos'}\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser userId={selectedUserId} onClear={this.clear} />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}